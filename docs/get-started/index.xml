<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started with EximeeBPMS</title><link>/get-started/</link><description>Recent content on Getting started with EximeeBPMS</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/get-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Download and Installation</title><link>/get-started/dmn/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/dmn/install/</guid><description>First you need to set up your development environment and install the EximeeBPMS Platform and the Camunda Modeler.
Prerequisites Make sure you have the following set of tools installed:
Java JDK 11+, Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.) A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine) Eclipse integrated development environment (IDE) EximeeBPMS Platform First, download a distribution of the EximeeBPMS Platform.</description></item><item><title>Download and Installation (1/6)</title><link>/get-started/quick-start/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/install/</guid><description>First, you need to install the EximeeBPMS Platform and the Camunda Modeler.
In the following section, we&amp;rsquo;ll describe how to install the EximeeBPMS Platform locally on your machine.
Hint If you prefer, you can also run the EximeeBPMS Platform with Docker:
docker pull eximeebpms/eximeebpms:run-latest docker run -d --name eximeebpms -p 8080:8080 eximeebpms/eximeebpms:run-latest Afterwards, you can install the Camunda Modeler.
Prerequisites Please make sure you have the following installed:</description></item><item><title>Setup a Spring Boot Project</title><link>/get-started/spring-boot/project-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/spring-boot/project-setup/</guid><description>First, let&amp;rsquo;s set up your first process application project in the IDE of your choice, the following description uses Eclipse.
Requirements The project requires Java 17&amp;frasl;21.
Set Up a Java Project We will start by setting up a Spring Boot application as an Apache Maven Project inside Eclipse. This consists of three steps:
Create a new Maven Project in Eclipse Add the EximeeBPMS &amp;amp; Spring Boot dependencies Add a main class as an entry point for launching the Spring Boot application.</description></item><item><title>Apache Maven Coordinates</title><link>/get-started/apache-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/apache-maven/</guid><description>This page lists the most commonly used Apache Maven Coordinates for EximeeBPMS.
Most EximeeBPMS artifacts are pushed to maven central.
EximeeBPMS BOM (Bill of Materials) &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eximeebpms.bpm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eximeebpms-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; Use the BOM! Please import the EximeeBPMS BOM if you use multiple EximeeBPMS projects. The BOM defines versions for all EximeeBPMS projects. This way it is ensured that no incompatible versions are imported.</description></item><item><title>Configure a Spring Boot Project</title><link>/get-started/spring-boot/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/spring-boot/configuration/</guid><description>The EximeeBPMS Spring Boot Application created in previous step uses the default and best practice configuration, embedded in a starter. There are several ways to customize or override the configuration. The easiest is to provide a set of parameters in the application.yaml (or application.properties) file. The full list of supported configuration parameters can be found here.
Customize Configuration Let&amp;rsquo;s create an application.yaml file in the src/main/resources folder with the following content:</description></item><item><title>Executing automated steps (2/6)</title><link>/get-started/quick-start/service-task/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/service-task/</guid><description>In this section, you&amp;rsquo;ll learn how to create your first BPMN 2.0 process with the Camunda Modeler and how to execute automated steps. Start by opening up Camunda Modeler.
Create a new BPMN Diagram Create a new BPMN diagram by clicking File &amp;gt; New File &amp;gt; BPMN Diagram (Camunda Platform).
Start with a Simple Process Start by modeling a simple process.
Double-click on the Start Event.</description></item><item><title>Setup a Java Project for DMN</title><link>/get-started/dmn/project-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/dmn/project-setup/</guid><description>Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.
Terminology - Process vs. Decisions DMN is a modeling language for decisions, whereas BPMN is a language for processes. This tutorial is about decisions. However, due to EximeeBPMS&amp;rsquo;s BPMN-focused heritage, the Java project contains classes and files with names like ProcessApplication and processes.xml. These are in fact generally applicable and can be used with both processes and decisions.</description></item><item><title>Create a DMN Decision Table</title><link>/get-started/dmn/model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/dmn/model/</guid><description>In this section you learn how to create your first DMN Decision Table with the Camunda Modeler. The table will contain the decision logic about the desired dish for a given season and guest count.
Now start up the Camunda Modeler.
Create a new Decision Diagram Create a new DMN diagram by clicking File &amp;gt; New File &amp;gt; DMN Diagram.
Start with the Table Header Start by setting the name and the id of the decision.</description></item><item><title>Deploy the Process (3/6)</title><link>/get-started/quick-start/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/deploy/</guid><description>In the next step, you&amp;rsquo;ll deploy the Process and start a new instance so you can see that your simple process is working correctly.
Deployment Support BPMN diagrams must be created for the process engine they intend to be deployed on. You cannot run a BPMN diagram modeled for EximeeBPMS Platform in Camunda Cloud, or vice versa, at this time.
Use the Camunda Modeler to Deploy the Process In order to deploy the Process, click on the deploy button in the Camunda Modeler, then give it the Deployment Name &amp;ldquo;Payment Retrieval&amp;rdquo; and click the Deploy button.</description></item><item><title>Modeling a BPMN 2.0 Process</title><link>/get-started/spring-boot/model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/spring-boot/model/</guid><description>In this section we learn how to deploy a process and invoke a Spring Bean from a BPMN 2.0 Service Task.
Deploy and Invoke BPMN Process Now that we know how to bootstrap the process engine within a Spring Boot Application, we can add a BPMN 2.0 process model and interact with the process from inside our Spring beans. In this section, we will
Model an executable BPMN 2.</description></item><item><title>Add a User Task to the Process (4/6)</title><link>/get-started/quick-start/user-task/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/user-task/</guid><description>In this section, you&amp;rsquo;ll learn how to involve humans in your process by using BPMN 2.0 User Tasks.
Add a User Task We want to modify our process so that we can involve humans.
To do so, open the process in the Camunda Modeler.
Select the create/remove space tool (&amp;lt;||&amp;gt;) from the Modeler&amp;rsquo;s left-hand menu, and use it to create space between the Start Event and the &amp;ldquo;Charge Credit Card&amp;rdquo; Service Task (click and drag the cursor to the right).</description></item><item><title>Evaluate, Deploy and Test the decision table</title><link>/get-started/dmn/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/dmn/deploy/</guid><description>In this step, we use Java Code to evaluate the decision table. Then we deploy the web application to Apache Tomcat and verify the result in Cockpit.
Evaluate the Decision Table To directly evaluate the decision table after deployment, add the following method to your Application class:
package org.eximeebpms.bpm.getstarted.dmn; @ProcessApplication(&amp;quot;Dinner App DMN&amp;quot;) public class DinnerApplication extends ServletProcessApplication { protected final static Logger LOGGER = Logger.getLogger(DinnerApplication.class.getName()); @PostDeploy public void evaluateDecisionTable(ProcessEngine processEngine) { DecisionService decisionService = processEngine.</description></item><item><title>Add Gateways to the Process (5/6)</title><link>/get-started/quick-start/gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/gateway/</guid><description>In this section, you&amp;rsquo;ll learn how to make your process more dynamic by using BPMN 2.0 Exclusive Gateways.
Add Two Gateways We want to modify our process so that it&amp;rsquo;s more dynamic.
To do so, open the process in the Camunda Modeler.
Next, from the Modeler&amp;rsquo;s left-hand menu, select the gateway shape (diamond) and drag it into position between the Start Event and the Service Task. Use the create space tool again as needed.</description></item><item><title>Model, Evaluate and Deploy a Decision Requirements Graph</title><link>/get-started/dmn/drg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/dmn/drg/</guid><description>In this step, we extend the previous example by a second decision Beverages which uses the Dish decision table as input. We model this dependency between the decisions within a Decision Requirements Graph (DRG) using the Camunda Modeler. Then, we adjust the Application class to evaluate the Beverages decision, deploy the web application to Apache Tomcat and verify the result in Cockpit.
Decision Requirements Graph vs. Decision Requirements Diagram The visual representation of a Decision Requirements Graph (DRG) is called Decision Requirements Diagram (DRD).</description></item><item><title>Leverage business rules (6/6)</title><link>/get-started/quick-start/decision-automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/decision-automation/</guid><description>In this section, you&amp;rsquo;ll learn how to add decision automation to your process by using BPMN 2.0 Business Rule Tasks and DMN 1.3 Decision Tables.
Add a Business Rule Task to the Process Use the Camunda Modeler to open the Payment Retrieval process then click on the Approve Payment Task. Change the activity type to Business Rule Task in the wrench button menu.
Next, link the Business Rule Task to a DMN table by changing Implementation to DMN and Decision Ref to approve-payment in the properties panel.</description></item><item><title>Congratulation!</title><link>/get-started/quick-start/complete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/complete/</guid><description>Your first process instance is running successfully! Now that you got the process running you may move on to step four to learn how you can involve humans in your process.
Feel free to remove the Desktop.getDesktop().browse() line if you don&amp;rsquo;t want to open this page again.</description></item><item><title>Congratulation!</title><link>/get-started/quick-start/success/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/get-started/quick-start/success/</guid><description>Your first process instance is running successfully! Now that you got the process running you may move on to step four to learn how you can involve humans in your process.
Feel free to remove the open() line if you don&amp;rsquo;t want to open this page again.</description></item></channel></rss>